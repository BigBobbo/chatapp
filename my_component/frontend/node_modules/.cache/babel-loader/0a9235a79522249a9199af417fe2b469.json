{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, ServiceEvent, Timeout } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyId, RecognitionEventArgs, SessionEventArgs } from \"../sdk/Exports\";\nimport { AgentConfig, DynamicGrammarBuilder, RequestSession, SpeechContext, SpeechDetected, type } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport class ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    this.privConnectionConfigurationPromise = undefined;\n    // A promise for a connection, but one that has not had the speech context sent yet.\n    // Do not consume directly, call fetchConnection instead.\n    this.privConnectionPromise = undefined;\n    this.privSetTimeout = setTimeout;\n    this.privIsLiveAudio = false;\n    this.recognizeOverride = undefined;\n    this.disconnectOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.sendPrePayloadJSONOverride = undefined;\n    this.postConnectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n    if (!audioSource) {\n      throw new ArgumentNullError(\"audioSource\");\n    }\n    if (!recognizerConfig) {\n      throw new ArgumentNullError(\"recognizerConfig\");\n    }\n    this.privMustReportEndOfStream = false;\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privAudioSource = audioSource;\n    this.privRecognizerConfig = recognizerConfig;\n    this.privIsDisposed = false;\n    this.privRecognizer = recognizer;\n    this.privRequestSession = new RequestSession(this.privAudioSource.id());\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privDynamicGrammar = new DynamicGrammarBuilder();\n    this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n    this.privAgentConfig = new AgentConfig();\n    if (typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\") {\n      this.privSetTimeout = Timeout.setTimeout;\n    }\n    this.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        const connectionClosedEvent = connectionEvent;\n        if (connectionClosedEvent.statusCode === 1003 || connectionClosedEvent.statusCode === 1007 || connectionClosedEvent.statusCode === 1002 || connectionClosedEvent.statusCode === 4000 || this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount) {\n          void this.cancelRecognitionLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\n        }\n      }\n    });\n  }\n  get audioSource() {\n    return this.privAudioSource;\n  }\n  get speechContext() {\n    return this.privSpeechContext;\n  }\n  get dynamicGrammar() {\n    return this.privDynamicGrammar;\n  }\n  get agentConfig() {\n    return this.privAgentConfig;\n  }\n  set conversationTranslatorToken(token) {\n    this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\n  }\n  set authentication(auth) {\n    this.privAuthentication = this.authentication;\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  dispose(reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        try {\n          const connection = yield this.privConnectionConfigurationPromise;\n          yield connection.dispose(reason);\n        } catch (error) {\n          // The connection is in a bad state. But we're trying to kill it, so...\n          return;\n        }\n      }\n    });\n  }\n  get connectionEvents() {\n    return this.privConnectionEvents;\n  }\n  get serviceEvents() {\n    return this.privServiceEvents;\n  }\n  get recognitionMode() {\n    return this.privRecognizerConfig.recognitionMode;\n  }\n  recognize(recoMode, successCallback, errorCallBack) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.recognizeOverride !== undefined) {\n        yield this.recognizeOverride(recoMode, successCallback, errorCallBack);\n        return;\n      }\n      // Clear the existing configuration promise to force a re-transmission of config and context.\n      this.privConnectionConfigurationPromise = undefined;\n      this.privRecognizerConfig.recognitionMode = recoMode;\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallBack;\n      this.privRequestSession.startNewRecognition();\n      this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\n      // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n      const conPromise = this.connectImpl();\n      let audioNode;\n      try {\n        const audioStreamNode = yield this.audioSource.attach(this.privRequestSession.audioNodeId);\n        const format = yield this.audioSource.format;\n        const deviceInfo = yield this.audioSource.deviceInfo;\n        this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\n        audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n        yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n          source: deviceInfo\n        };\n      } catch (error) {\n        yield this.privRequestSession.onStopRecognizing();\n        throw error;\n      }\n      try {\n        yield conPromise;\n      } catch (error) {\n        yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\n        return;\n      }\n      const sessionStartEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n      if (!!this.privRecognizer.sessionStarted) {\n        this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n      }\n      void this.receiveMessage();\n      const audioSendPromise = this.sendAudio(audioNode);\n      audioSendPromise.catch(error => __awaiter(this, void 0, void 0, function* () {\n        yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n      }));\n      return;\n    });\n  }\n  stopRecognizing() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privRequestSession.isRecognizing) {\n        try {\n          yield this.audioSource.turnOff();\n          yield this.sendFinalAudio();\n          yield this.privRequestSession.onStopRecognizing();\n          yield this.privRequestSession.turnCompletionPromise;\n        } finally {\n          yield this.privRequestSession.dispose();\n        }\n      }\n      return;\n    });\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.connectImpl();\n      return Promise.resolve();\n    });\n  }\n  connectAsync(cb, err) {\n    this.connectImpl().then(() => {\n      try {\n        if (!!cb) {\n          cb();\n        }\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }, reason => {\n      try {\n        if (!!err) {\n          err(reason);\n        }\n        /* eslint-disable no-empty */\n      } catch (error) {}\n    });\n  }\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n      if (this.disconnectOverride !== undefined) {\n        yield this.disconnectOverride();\n      }\n      if (this.privConnectionPromise !== undefined) {\n        try {\n          yield (yield this.privConnectionPromise).dispose();\n        } catch (error) {}\n      }\n      this.privConnectionPromise = undefined;\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  sendMessage(message) {\n    return;\n  }\n  sendNetworkMessage(path, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n      const contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n      const connection = yield this.fetchConnection();\n      return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\n    });\n  }\n  set activityTemplate(messagePayload) {\n    this.privActivityTemplate = messagePayload;\n  }\n  get activityTemplate() {\n    return this.privActivityTemplate;\n  }\n  sendTelemetryData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const telemetryData = this.privRequestSession.getTelemetry();\n      if (ServiceRecognizerBase.telemetryDataEnabled !== true || this.privIsDisposed || null === telemetryData) {\n        return;\n      }\n      if (!!ServiceRecognizerBase.telemetryData) {\n        try {\n          ServiceRecognizerBase.telemetryData(telemetryData);\n          /* eslint-disable no-empty */\n        } catch (_a) {}\n      }\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Text, \"telemetry\", this.privRequestSession.requestId, \"application/json\", telemetryData));\n    });\n  }\n  // Cancels recognition.\n  cancelRecognitionLocal(cancellationReason, errorCode, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        yield this.privRequestSession.onStopRecognizing();\n        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\n      }\n    });\n  }\n  receiveMessage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.privIsDisposed) {\n          // We're done.\n          return;\n        }\n        let connection = yield this.fetchConnection();\n        const message = yield connection.read();\n        if (this.receiveMessageOverride !== undefined) {\n          return this.receiveMessageOverride();\n        }\n        // indicates we are draining the queue and it came with no message;\n        if (!message) {\n          if (!this.privRequestSession.isRecognizing) {\n            return;\n          } else {\n            return this.receiveMessage();\n          }\n        }\n        this.privServiceHasSentMessage = true;\n        const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n        if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\n          switch (connectionMessage.path.toLowerCase()) {\n            case \"turn.start\":\n              this.privMustReportEndOfStream = true;\n              this.privRequestSession.onServiceTurnStartResponse();\n              break;\n            case \"speech.startdetected\":\n              const speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n              const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n              if (!!this.privRecognizer.speechStartDetected) {\n                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n              }\n              break;\n            case \"speech.enddetected\":\n              let json;\n              if (connectionMessage.textBody.length > 0) {\n                json = connectionMessage.textBody;\n              } else {\n                // If the request was empty, the JSON returned is empty.\n                json = \"{ Offset: 0 }\";\n              }\n              const speechStopDetected = SpeechDetected.fromJSON(json);\n              // Only shrink the buffers for continuous recognition.\n              // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\n              if (this.privRecognizerConfig.isContinuousRecognition) {\n                this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n              }\n              const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n              if (!!this.privRecognizer.speechEndDetected) {\n                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n              }\n              break;\n            case \"turn.end\":\n              yield this.sendTelemetryData();\n              if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\n                this.privMustReportEndOfStream = false;\n                yield this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\n              }\n              const sessionStopEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n              yield this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\n              if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                if (!!this.privRecognizer.sessionStopped) {\n                  this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                }\n                return;\n              } else {\n                connection = yield this.fetchConnection();\n                yield this.sendPrePayloadJSON(connection);\n              }\n              break;\n            default:\n              if (!(yield this.processTypeSpecificMessages(connectionMessage))) {\n                // here are some messages that the derived class has not processed, dispatch them to connect class\n                if (!!this.privServiceEvents) {\n                  this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                }\n              }\n          }\n        }\n        return this.receiveMessage();\n      } catch (error) {\n        return null;\n      }\n    });\n  }\n  sendSpeechContext(connection, generateNewRequestId) {\n    const speechContextJson = this.speechContext.toJSON();\n    if (generateNewRequestId) {\n      this.privRequestSession.onSpeechContext();\n    }\n    if (speechContextJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.context\", this.privRequestSession.requestId, \"application/json\", speechContextJson));\n    }\n    return;\n  }\n  // Encapsulated for derived service recognizers that need to send additional JSON\n  sendPrePayloadJSON(connection) {\n    let generateNewRequestId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.sendPrePayloadJSONOverride !== undefined) {\n        return this.sendPrePayloadJSONOverride(connection);\n      }\n      yield this.sendSpeechContext(connection, generateNewRequestId);\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n  sendWaveHeader(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const format = yield this.audioSource.format;\n      // this.writeBufferToConsole(format.header);\n      return connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, \"audio/x-wav\", format.header));\n    });\n  }\n  // Establishes a websocket connection to the end point.\n  connectImpl() {\n    if (this.privConnectionPromise !== undefined) {\n      return this.privConnectionPromise.then(connection => {\n        if (connection.state() === ConnectionState.Disconnected) {\n          this.privConnectionId = null;\n          this.privConnectionPromise = undefined;\n          this.privServiceHasSentMessage = false;\n          return this.connectImpl();\n        }\n        return this.privConnectionPromise;\n      }, () => {\n        this.privConnectionId = null;\n        this.privConnectionPromise = undefined;\n        this.privServiceHasSentMessage = false;\n        return this.connectImpl();\n      });\n    }\n    this.privConnectionPromise = this.retryableConnect();\n    // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.privConnectionPromise.catch(() => {});\n    if (this.postConnectImplOverride !== undefined) {\n      return this.postConnectImplOverride(this.privConnectionPromise);\n    }\n    return this.privConnectionPromise;\n  }\n  sendSpeechServiceConfig(connection, requestSession, SpeechServiceConfigJson) {\n    requestSession.onSpeechContext();\n    // filter out anything that is not required for the service to work.\n    if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n      const withTelemetry = JSON.parse(SpeechServiceConfigJson);\n      const replacement = {\n        context: {\n          system: withTelemetry.context.system\n        }\n      };\n      SpeechServiceConfigJson = JSON.stringify(replacement);\n    }\n    if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\n      const json = JSON.parse(SpeechServiceConfigJson);\n      json.context.DisableReferenceChannel = \"True\";\n      json.context.MicSpec = \"1_0_0\";\n      SpeechServiceConfigJson = JSON.stringify(json);\n    }\n    if (SpeechServiceConfigJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\n    }\n    return;\n  }\n  fetchConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        return this.privConnectionConfigurationPromise.then(connection => {\n          if (connection.state() === ConnectionState.Disconnected) {\n            this.privConnectionId = null;\n            this.privConnectionConfigurationPromise = undefined;\n            this.privServiceHasSentMessage = false;\n            return this.fetchConnection();\n          }\n          return this.privConnectionConfigurationPromise;\n        }, () => {\n          this.privConnectionId = null;\n          this.privConnectionConfigurationPromise = undefined;\n          this.privServiceHasSentMessage = false;\n          return this.fetchConnection();\n        });\n      }\n      this.privConnectionConfigurationPromise = this.configureConnection();\n      return yield this.privConnectionConfigurationPromise;\n    });\n  }\n  sendAudio(audioStreamNode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const audioFormat = yield this.audioSource.format;\n      // The time we last sent data to the service.\n      let nextSendTime = Date.now();\n      // Max amount to send before we start to throttle\n      const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n      const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n      const startRecogNumber = this.privRequestSession.recogNumber;\n      const readAndUploadCycle = () => __awaiter(this, void 0, void 0, function* () {\n        // If speech is done, stop sending audio.\n        if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n          const connection = yield this.fetchConnection();\n          const audioStreamChunk = yield audioStreamNode.read();\n          // we have a new audio chunk to upload.\n          if (this.privRequestSession.isSpeechEnded) {\n            // If service already recognized audio end then don't send any more audio\n            return;\n          }\n          let payload;\n          let sendDelay;\n          if (!audioStreamChunk || audioStreamChunk.isEnd) {\n            payload = null;\n            sendDelay = 0;\n          } else {\n            payload = audioStreamChunk.buffer;\n            this.privRequestSession.onAudioSent(payload.byteLength);\n            if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n              sendDelay = 0;\n            } else {\n              sendDelay = Math.max(0, nextSendTime - Date.now());\n            }\n          }\n          if (0 !== sendDelay) {\n            yield this.delay(sendDelay);\n          }\n          if (payload !== null) {\n            nextSendTime = Date.now() + payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2);\n          }\n          // Are we still alive?\n          if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n            connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)).catch(() => {\n              // eslint-disable-next-line @typescript-eslint/no-empty-function\n              this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => {});\n            });\n            if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {\n              // this.writeBufferToConsole(payload);\n              // Regardless of success or failure, schedule the next upload.\n              // If the underlying connection was broken, the next cycle will\n              // get a new connection and re-transmit missing audio automatically.\n              return readAndUploadCycle();\n            } else {\n              // the audio stream has been closed, no need to schedule next\n              // read-upload cycle.\n              if (!this.privIsLiveAudio) {\n                this.privRequestSession.onSpeechEnded();\n              }\n            }\n          }\n        }\n      });\n      return readAndUploadCycle();\n    });\n  }\n  retryableConnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isUnAuthorized = false;\n      this.privAuthFetchEventId = createNoDashGuid();\n      const sessionId = this.privRequestSession.sessionId;\n      this.privConnectionId = sessionId !== undefined ? sessionId : createNoDashGuid();\n      this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n      let lastStatusCode = 0;\n      let lastReason = \"\";\n      while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\n        // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\n        // facing event when a connection fails to let them try and provide new auth information.\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n        const auth = yield authPromise;\n        yield this.privRequestSession.onAuthCompleted(false);\n        // Create the connection\n        const connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\n        // Attach the telemetry handlers.\n        this.privRequestSession.listenForServiceTelemetry(connection.events);\n        // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n        // it'll stop sending events.\n        connection.events.attach(event => {\n          this.connectionEvents.onEvent(event);\n        });\n        const response = yield connection.open();\n        // 200 == everything is fine.\n        if (response.statusCode === 200) {\n          yield this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\n          return Promise.resolve(connection);\n        } else if (response.statusCode === 1006) {\n          isUnAuthorized = true;\n        }\n        lastStatusCode = response.statusCode;\n        lastReason = response.reason;\n        this.privRequestSession.onRetryConnection();\n      }\n      yield this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\n      return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\n    });\n  }\n  delay(delayMs) {\n    return new Promise(resolve => this.privSetTimeout(resolve, delayMs));\n  }\n  writeBufferToConsole(buffer) {\n    let out = \"Buffer Size: \";\n    if (null === buffer) {\n      out += \"null\";\n    } else {\n      const readView = new Uint8Array(buffer);\n      out += `${buffer.byteLength}\\r\\n`;\n      for (let i = 0; i < buffer.byteLength; i++) {\n        out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n        if ((i + 1) % 16 === 0) {\n          // eslint-disable-next-line no-console\n          console.info(out);\n          out = \"\";\n        }\n      }\n    }\n    // eslint-disable-next-line no-console\n    console.info(out);\n  }\n  sendFinalAudio() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\n      return;\n    });\n  }\n  // Takes an established websocket connection to the endpoint and sends speech configuration information.\n  configureConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.connectImpl();\n      if (this.configConnectionOverride !== undefined) {\n        return this.configConnectionOverride(connection);\n      }\n      yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n      yield this.sendPrePayloadJSON(connection, false);\n      return connection;\n    });\n  }\n}\nServiceRecognizerBase.telemetryDataEnabled = true;","map":{"version":3,"mappings":"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","names":["ReplayableAudioNode","ArgumentNullError","ConnectionState","createNoDashGuid","EventSource","MessageType","ServiceEvent","Timeout","CancellationErrorCode","CancellationReason","PropertyId","RecognitionEventArgs","SessionEventArgs","AgentConfig","DynamicGrammarBuilder","RequestSession","SpeechContext","SpeechDetected","type","SpeechConnectionMessage","ServiceRecognizerBase","constructor","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","undefined","setTimeout","privMustReportEndOfStream","privAuthentication","privConnectionFactory","privAudioSource","privRecognizerConfig","privIsDisposed","privRecognizer","privRequestSession","id","privConnectionEvents","privServiceEvents","privDynamicGrammar","privSpeechContext","privAgentConfig","Blob","Worker","privSetTimeout","connectionEvents","attach","connectionEvent","name","connectionClosedEvent","statusCode","numConnectionAttempts","maxRetryCount","cancelRecognitionLocal","Error","BadRequestParameters","ConnectionFailure","reason","speechContext","dynamicGrammar","agentConfig","conversationTranslatorToken","token","parameters","setProperty","ConversationTranslator_Token","auth","isDisposed","dispose","privConnectionConfigurationPromise","connection","error","serviceEvents","recognitionMode","recognize","recoMode","successCallback","errorCallBack","recognizeOverride","privSuccessCallback","privErrorCallback","startNewRecognition","listenForServiceTelemetry","events","conPromise","connectImpl","audioNode","audioStreamNode","audioNodeId","format","deviceInfo","privIsLiveAudio","Microphones","avgBytesPerSec","onAudioSourceAttachCompleted","SpeechServiceConfig","Context","audio","source","onStopRecognizing","sessionStartEventArgs","sessionId","sessionStarted","receiveMessage","audioSendPromise","sendAudio","catch","__awaiter","RuntimeError","stopRecognizing","isRecognizing","turnOff","sendFinalAudio","turnCompletionPromise","connect","Promise","resolve","connectAsync","cb","err","then","e","disconnect","NoError","disconnectOverride","privConnectionPromise","sendMessage","message","sendNetworkMessage","path","payload","Text","Binary","contentType","fetchConnection","send","requestId","activityTemplate","messagePayload","privActivityTemplate","sendTelemetryData","telemetryData","getTelemetry","telemetryDataEnabled","cancellationReason","errorCode","cancelRecognition","read","receiveMessageOverride","privServiceHasSentMessage","connectionMessage","fromConnectionMessage","toLowerCase","onServiceTurnStartResponse","speechStartDetected","fromJSON","textBody","speechStartEventArgs","Offset","json","length","speechStopDetected","isContinuousRecognition","onServiceRecognized","currentTurnAudioOffset","speechStopEventArgs","speechEndDetected","isSpeechEnded","EndOfStream","sessionStopEventArgs","onServiceTurnEndResponse","sessionStopped","sendPrePayloadJSON","processTypeSpecificMessages","onEvent","sendSpeechContext","generateNewRequestId","speechContextJson","toJSON","onSpeechContext","sendPrePayloadJSONOverride","sendWaveHeader","header","state","Disconnected","privConnectionId","retryableConnect","postConnectImplOverride","sendSpeechServiceConfig","requestSession","SpeechServiceConfigJson","withTelemetry","JSON","parse","replacement","context","system","stringify","getProperty","DisableReferenceChannel","MicSpec","configureConnection","audioFormat","nextSendTime","Date","now","fastLaneSizeMs","maxSendUnthrottledBytes","parseInt","startRecogNumber","recogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","isEnd","buffer","onAudioSent","byteLength","bytesSent","Math","max","delay","onSpeechEnded","isUnAuthorized","privAuthFetchEventId","onPreConnectionStart","lastStatusCode","lastReason","authPromise","fetchOnExpiry","fetch","onAuthCompleted","create","event","response","open","onConnectionEstablishCompleted","onRetryConnection","reject","SpeechServiceConnection_Endpoint","delayMs","writeBufferToConsole","out","readView","Uint8Array","i","toString","padStart","console","info","configConnectionOverride","serialize"],"sources":["src/common.speech/ServiceRecognizerBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        // Only shrink the buffers for continuous recognition.\r\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                        }\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}