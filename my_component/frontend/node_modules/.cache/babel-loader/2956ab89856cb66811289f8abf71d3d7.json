{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { PronunciationAssessmentGradingSystem, PronunciationAssessmentGranularity, PropertyCollection, PropertyId } from \"./Exports\";\n/**\n * Pronunciation assessment configuration.\n * @class PronunciationAssessmentConfig\n * Added in version 1.15.0.\n */\nexport class PronunciationAssessmentConfig {\n  /**\n   * PronunciationAssessmentConfig constructor.\n   * @constructor\n   * @param {string} referenceText\n   * @param gradingSystem\n   * @param granularity\n   * @param enableMiscue\n   */\n  constructor(referenceText) {\n    let gradingSystem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PronunciationAssessmentGradingSystem.FivePoint;\n    let granularity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PronunciationAssessmentGranularity.Phoneme;\n    let enableMiscue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\n    this.privProperties = new PropertyCollection();\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\n  }\n  /**\n   * @member PronunciationAssessmentConfig.fromJSON\n   * @function\n   * @public\n   * @param {string} json The json string containing the pronunciation assessment parameters.\n   * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\n   * @summary Creates an instance of the PronunciationAssessmentConfig from json.\n   */\n  static fromJSON(json) {\n    Contracts.throwIfNullOrUndefined(json, \"json\");\n    const config = new PronunciationAssessmentConfig(\"\");\n    config.privProperties = new PropertyCollection();\n    config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\n    return config;\n  }\n  toJSON() {\n    this.updateJson();\n    return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\n  }\n  applyTo(recognizer) {\n    this.updateJson();\n    const recoBase = recognizer.internalData;\n    recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params));\n  }\n  /**\n   * Gets the reference text.\n   * @member PronunciationAssessmentConfig.prototype.referenceText\n   * @function\n   * @public\n   * @returns {string} Reference text.\n   */\n  get referenceText() {\n    return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n  }\n  /**\n   * Gets/Sets the reference text.\n   * @member PronunciationAssessmentConfig.prototype.referenceText\n   * @function\n   * @public\n   * @param {string} referenceText - Reference text.\n   */\n  set referenceText(referenceText) {\n    Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\n    this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n  }\n  /**\n   * Sets the phoneme alphabet.\n   * The valid values are \"SAPI\" (default) and \"IPA\".\n   * Added in version 1.20.0\n   * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\n   * @function\n   * @public\n   * @param {string} phonemeAlphabet - Phoneme alphabet.\n   */\n  set phonemeAlphabet(phonemeAlphabet) {\n    Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\n    this.privPhonemeAlphabet = phonemeAlphabet;\n  }\n  /**\n   * Sets the nbest phoneme count\n   * Added in version 1.20.0\n   * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\n   * @function\n   * @public\n   * @param {number} nbestPhonemeCount - NBest phoneme count.\n   */\n  set nbestPhonemeCount(nbestPhonemeCount) {\n    this.privNBestPhonemeCount = nbestPhonemeCount;\n  }\n  /**\n   * @member PronunciationAssessmentConfig.prototype.properties\n   * @function\n   * @public\n   * @return {PropertyCollection} Properties of the config.\n   * @summary Gets a pronunciation assessment config properties\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  updateJson() {\n    const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\n    const paramsJson = JSON.parse(jsonString);\n    const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n    if (referenceText) {\n      paramsJson.referenceText = referenceText;\n    }\n    const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\n    if (gradingSystem) {\n      paramsJson.gradingSystem = gradingSystem;\n    }\n    const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\n    if (granularity) {\n      paramsJson.granularity = granularity;\n    }\n    if (this.privPhonemeAlphabet) {\n      paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\n    }\n    if (this.privNBestPhonemeCount) {\n      paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\n    }\n    // always set dimension to Comprehensive\n    paramsJson.dimension = \"Comprehensive\";\n    const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\n    if (enableMiscueString === \"true\") {\n      paramsJson.enableMiscue = true;\n    } else if (enableMiscueString === \"false\") {\n      paramsJson.enableMiscue = false;\n    }\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\n  }\n}","map":{"version":3,"mappings":"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","names":["Contracts","PronunciationAssessmentGradingSystem","PronunciationAssessmentGranularity","PropertyCollection","PropertyId","PronunciationAssessmentConfig","constructor","referenceText","gradingSystem","FivePoint","granularity","Phoneme","enableMiscue","throwIfNullOrUndefined","privProperties","setProperty","PronunciationAssessment_ReferenceText","PronunciationAssessment_GradingSystem","PronunciationAssessment_Granularity","PronunciationAssessment_EnableMiscue","String","fromJSON","json","config","properties","PronunciationAssessment_Json","toJSON","updateJson","getProperty","PronunciationAssessment_Params","applyTo","recognizer","recoBase","internalData","speechContext","setPronunciationAssessmentParams","throwIfNullOrWhitespace","phonemeAlphabet","privPhonemeAlphabet","nbestPhonemeCount","privNBestPhonemeCount","jsonString","paramsJson","JSON","parse","dimension","enableMiscueString","stringify"],"sources":["src/sdk/PronunciationAssessmentConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params));\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString === \"true\") {\r\n            paramsJson.enableMiscue = true;\r\n        } else if (enableMiscueString === \"false\") {\r\n            paramsJson.enableMiscue = false;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}