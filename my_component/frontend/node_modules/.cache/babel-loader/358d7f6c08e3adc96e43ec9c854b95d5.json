{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, SpeakerIdentificationModel, SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerVerificationModel } from \"./Exports\";\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nexport class SpeakerRecognizer {\n  /**\n   * SpeakerRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privAudioConfigImpl = audioConfig;\n    Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implSRSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this SpeakerRecognizer.\n   * @member SpeakerRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Get recognition result for model using given audio\n   * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @async\n   * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n   * @param cb - Callback invoked once result is returned.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (model instanceof SpeakerIdentificationModel) {\n        const responsePromise = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\n        return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\n      } else if (model instanceof SpeakerVerificationModel) {\n        const responsePromise = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\n        return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\n      } else {\n        throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n      }\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member SpeakerRecognizer.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    return;\n  }\n  // Does class setup, swiped from Recognizer.\n  implSRSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n  getResult(responsePromise, resultType, profileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield responsePromise;\n      return new SpeakerRecognitionResult(resultType, response.data, profileId, response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled);\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Context","OS","SpeakerIdMessageAdapter","SpeakerRecognitionConfig","Contracts","PropertyId","ResultReason","SpeakerIdentificationModel","SpeakerRecognitionResult","SpeakerRecognitionResultType","SpeakerVerificationModel","SpeakerRecognizer","constructor","speechConfig","audioConfig","speechConfigImpl","throwIfNull","privAudioConfigImpl","privProperties","properties","clone","implSRSetup","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","recognizeOnceAsync","model","responsePromise","privAdapter","identifySpeaker","getResult","Identify","undefined","verifySpeaker","Verify","voiceProfile","profileId","Error","close","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","resultType","response","data","ok","RecognizedSpeaker","Canceled"],"sources":["src/sdk/SpeakerRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognitionResultType,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * SpeakerRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implSRSetup();\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n\r\n        if (model instanceof SpeakerIdentificationModel) {\r\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\r\n            return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\r\n        } else if (model instanceof SpeakerVerificationModel) {\r\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\r\n            return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\r\n        } else {\r\n            throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    private implSRSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private async getResult(responsePromise: Promise<IRestResponse>, resultType: SpeakerRecognitionResultType, profileId?: string): Promise<SpeakerRecognitionResult> {\r\n        const response: IRestResponse = await responsePromise;\r\n        return new SpeakerRecognitionResult(\r\n            resultType,\r\n            response.data,\r\n            profileId,\r\n            response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled,\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}