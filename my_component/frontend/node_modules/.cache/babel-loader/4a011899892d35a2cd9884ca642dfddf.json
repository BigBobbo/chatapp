{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nexport class EventSource {\n  constructor(metadata) {\n    this.privEventListeners = {};\n    this.privIsDisposed = false;\n    this.privConsoleListener = undefined;\n    this.privMetadata = metadata;\n  }\n  onEvent(event) {\n    if (this.isDisposed()) {\n      throw new ObjectDisposedError(\"EventSource\");\n    }\n    if (this.metadata) {\n      for (const paramName in this.metadata) {\n        if (paramName) {\n          if (event.metadata) {\n            if (!event.metadata[paramName]) {\n              event.metadata[paramName] = this.metadata[paramName];\n            }\n          }\n        }\n      }\n    }\n    for (const eventId in this.privEventListeners) {\n      if (eventId && this.privEventListeners[eventId]) {\n        this.privEventListeners[eventId](event);\n      }\n    }\n  }\n  attach(onEventCallback) {\n    const id = createNoDashGuid();\n    this.privEventListeners[id] = onEventCallback;\n    return {\n      detach: () => {\n        delete this.privEventListeners[id];\n        return Promise.resolve();\n      }\n    };\n  }\n  attachListener(listener) {\n    return this.attach(e => listener.onEvent(e));\n  }\n  attachConsoleListener(listener) {\n    if (!!this.privConsoleListener) {\n      void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\n    }\n\n    this.privConsoleListener = this.attach(e => listener.onEvent(e));\n    return this.privConsoleListener;\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  dispose() {\n    this.privEventListeners = null;\n    this.privIsDisposed = true;\n  }\n  get metadata() {\n    return this.privMetadata;\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,mBAAmB,QAAQ,SAAS;AAC7C,SAASC,gBAAgB,QAAQ,QAAQ;AAMzC,OAAM,MAAOC,WAAW;EAMpBC,YAAmBC,QAAoC;IAL/C,uBAAkB,GAA+C,EAAE;IAEnE,mBAAc,GAAY,KAAK;IAC/B,wBAAmB,GAAgBC,SAAS;IAGhD,IAAI,CAACC,YAAY,GAAGF,QAAQ;EAChC;EAEOG,OAAO,CAACC,KAAa;IACxB,IAAI,IAAI,CAACC,UAAU,EAAE,EAAE;MACnB,MAAO,IAAIT,mBAAmB,CAAC,aAAa,CAAC;;IAGjD,IAAI,IAAI,CAACI,QAAQ,EAAE;MACf,KAAK,MAAMM,SAAS,IAAI,IAAI,CAACN,QAAQ,EAAE;QACnC,IAAIM,SAAS,EAAE;UACX,IAAIF,KAAK,CAACJ,QAAQ,EAAE;YAChB,IAAI,CAACI,KAAK,CAACJ,QAAQ,CAACM,SAAS,CAAC,EAAE;cAC5BF,KAAK,CAACJ,QAAQ,CAACM,SAAS,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACM,SAAS,CAAC;;;;;;IAOxE,KAAK,MAAMC,OAAO,IAAI,IAAI,CAACC,kBAAkB,EAAE;MAC3C,IAAID,OAAO,IAAI,IAAI,CAACC,kBAAkB,CAACD,OAAO,CAAC,EAAE;QAC7C,IAAI,CAACC,kBAAkB,CAACD,OAAO,CAAC,CAACH,KAAK,CAAC;;;EAGnD;EAEOK,MAAM,CAACC,eAAwC;IAClD,MAAMC,EAAE,GAAGd,gBAAgB,EAAE;IAC7B,IAAI,CAACW,kBAAkB,CAACG,EAAE,CAAC,GAAGD,eAAe;IAC7C,OAAO;MACHE,MAAM,EAAE,MAAoB;QACxB,OAAO,IAAI,CAACJ,kBAAkB,CAACG,EAAE,CAAC;QAClC,OAAOE,OAAO,CAACC,OAAO,EAAE;MAC5B;KACH;EACL;EAEOC,cAAc,CAACC,QAAgC;IAClD,OAAO,IAAI,CAACP,MAAM,CAAEQ,CAAS,IAAWD,QAAQ,CAACb,OAAO,CAACc,CAAC,CAAC,CAAC;EAChE;EAEOC,qBAAqB,CAACF,QAAgC;IACzD,IAAI,CAAC,CAAC,IAAI,CAACG,mBAAmB,EAAE;MAC5B,KAAK,IAAI,CAACA,mBAAmB,CAACP,MAAM,EAAE,CAAC,CAAC;;;IAE5C,IAAI,CAACO,mBAAmB,GAAG,IAAI,CAACV,MAAM,CAAEQ,CAAS,IAAWD,QAAQ,CAACb,OAAO,CAACc,CAAC,CAAC,CAAC;IAChF,OAAO,IAAI,CAACE,mBAAmB;EACnC;EAEOd,UAAU;IACb,OAAO,IAAI,CAACe,cAAc;EAC9B;EAEOC,OAAO;IACV,IAAI,CAACb,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACY,cAAc,GAAG,IAAI;EAC9B;EAEA,IAAWpB,QAAQ;IACf,OAAO,IAAI,CAACE,YAAY;EAC5B","names":["ObjectDisposedError","createNoDashGuid","EventSource","constructor","metadata","undefined","privMetadata","onEvent","event","isDisposed","paramName","eventId","privEventListeners","attach","onEventCallback","id","detach","Promise","resolve","attachListener","listener","e","attachConsoleListener","privConsoleListener","privIsDisposed","dispose"],"sources":["src/common/EventSource.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}