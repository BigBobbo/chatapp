{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId, VoiceProfileType } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SpeakerIdMessageAdapter\n */\nexport class SpeakerIdMessageAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\n    }\n    this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\n   * Sends create profile request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of voice profile to create.\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\n   */\n  createProfile(profileType, lang) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams({}), {\n      locale: lang\n    });\n  }\n  /**\n   * Sends create enrollment request to endpoint.\n   * @function\n   * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n  createEnrollment(profile, audioSource) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return audioSource.blob.then(result => this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n      ignoreMinLength: \"true\"\n    }), null, result));\n  }\n  /**\n   * Sends verification request to endpoint.\n   * @function\n   * @param {SpeakerVerificationModel} model - voice model to verify against.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n  verifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n          ignoreMinLength: \"true\"\n        }), null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\n   * Sends identification request to endpoint.\n   * @function\n   * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n  identifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n          profileIds: model.voiceProfileIds,\n          ignoreMinLength: \"true\"\n        }), null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\n   * Sends profile status request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to check.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n  getProfileStatus(profile) {\n    const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\n   * Sends get all profiles request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return list of\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing all profiles\n   */\n  getProfiles(profileType) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\n   * Sends get activation/auth phrases request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return phrases for\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\n   */\n  getPhrases(profileType, lang) {\n    const uri = `${this.getOperationUri(profileType)}`.replace(\"profiles\", \"phrases\") + \"/\" + lang;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\n   * Sends delete profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to delete.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to deletion request\n   */\n  deleteProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n    return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\n  }\n  /**\n   * Sends reset profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to reset enrollments for.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to reset request\n   */\n  resetProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\n    return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\n  }\n  getOperationUri(profileType) {\n    const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n    const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n    return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n  }\n  getQueryParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\n    return params;\n  }\n}","map":{"version":3,"mappings":"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","names":["RestConfigBase","RestMessageAdapter","RestRequestType","PropertyId","VoiceProfileType","ConnectionFactoryBase","SpeakerIdMessageAdapter","constructor","config","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","SpeechServiceConnection_Host","privUri","options","requestOptions","headers","configParams","subscriptionKey","SpeechServiceConnection_Key","privApiVersion","SpeakerRecognition_Api_Version","privRestAdapter","createProfile","profileType","lang","uri","getOperationUri","request","Post","getQueryParams","locale","createEnrollment","profile","audioSource","profileId","blob","then","result","File","ignoreMinLength","verifySpeaker","model","voiceProfile","e","Promise","resolve","data","identifySpeaker","TextIndependentIdentification","profileIds","voiceProfileIds","getProfileStatus","Get","getProfiles","getPhrases","replace","deleteProfile","Delete","resetProfile","mode","dependency","TextDependentVerification","params","apiVersion"],"sources":["src/common.speech/SpeakerIdMessageAdapter.ts"],"sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privApiVersion: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams({}), { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result));\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e as string } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e as string } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get activation/auth phrases request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getPhrases(profileType: VoiceProfileType, lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(profileType)}`.replace(\"profiles\", \"phrases\") + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n    private getQueryParams(params: { [key: string]: any } = {}): { [key: string]: any } {\r\n\r\n        params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\r\n        return params;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}