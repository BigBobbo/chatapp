{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { VoiceProfileResult } from \"./Exports\";\n/**\n * Output format\n * @class VoiceProfilePhraseResult\n */\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\n  constructor(reason, statusText, json) {\n    super(reason, statusText);\n    this.privPhrases = [];\n    Contracts.throwIfNullOrUndefined(json, \"phrase result JSON\");\n    if (!!json.value && !!json.value[0]) {\n      for (const item of json.value) {\n        this.privPhrases.push(item.passPhrase || item.activationPhrase);\n      }\n    }\n  }\n  get phrases() {\n    return this.privPhrases;\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAEIC,kBAAkB,QACf,WAAW;AAElB;;;;AAIA,OAAM,MAAOC,wBAAyB,SAAQD,kBAAkB;EAG5DE,YAAmBC,MAAoB,EAAEC,UAAkB,EAAEC,IAAiE;IAC1H,KAAK,CAACF,MAAM,EAAEC,UAAU,CAAC;IAHrB,gBAAW,GAAa,EAAE;IAI9BL,SAAS,CAACO,sBAAsB,CAACD,IAAI,EAAE,oBAAoB,CAAC;IAC5D,IAAI,CAAC,CAACA,IAAI,CAACE,KAAK,IAAI,CAAC,CAACF,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,EAAE;MACjC,KAAK,MAAMC,IAAI,IAAIH,IAAI,CAACE,KAAK,EAAE;QAC3B,IAAI,CAACE,WAAW,CAACC,IAAI,CAACF,IAAI,CAACG,UAAU,IAAIH,IAAI,CAACI,gBAAgB,CAAC;;;EAG3E;EAEA,IAAWC,OAAO;IACd,OAAO,IAAI,CAACJ,WAAW;EAC3B","names":["Contracts","VoiceProfileResult","VoiceProfilePhraseResult","constructor","reason","statusText","json","throwIfNullOrUndefined","value","item","privPhrases","push","passPhrase","activationPhrase","phrases"],"sources":["src/sdk/VoiceProfilePhraseResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n\r\n    public constructor(reason: ResultReason, statusText: string, json: {value: {passPhrase?: string; activationPhrase?: string}[]}) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(json, \"phrase result JSON\");\r\n        if (!!json.value && !!json.value[0]) {\r\n            for (const item of json.value) {\r\n                this.privPhrases.push(item.passPhrase || item.activationPhrase);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}