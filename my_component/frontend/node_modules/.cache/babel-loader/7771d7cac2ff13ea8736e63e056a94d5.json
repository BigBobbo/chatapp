{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable max-classes-per-file */\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioConfig, CancellationErrorCode, CancellationReason, ProfanityOption, PropertyCollection, PropertyId, SpeechTranslationConfig, TranslationRecognizer } from \"../Exports\";\nimport { ConversationImpl } from \"./Conversation\";\nimport { ConversationCommon, ConversationTranslationCanceledEventArgs } from \"./Exports\";\nexport var SpeechState;\n(function (SpeechState) {\n  SpeechState[SpeechState[\"Inactive\"] = 0] = \"Inactive\";\n  SpeechState[SpeechState[\"Connecting\"] = 1] = \"Connecting\";\n  SpeechState[SpeechState[\"Connected\"] = 2] = \"Connected\";\n})(SpeechState || (SpeechState = {}));\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\n  constructor(speechConfig, audioConfig, translator) {\n    super(speechConfig, audioConfig);\n    this.privSpeechState = SpeechState.Inactive;\n    if (!!translator) {\n      this.privTranslator = translator;\n      this.sessionStarted = () => {\n        this.privSpeechState = SpeechState.Connected;\n      };\n      this.sessionStopped = () => {\n        this.privSpeechState = SpeechState.Inactive;\n      };\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      this.recognized = (tr, e) => __awaiter(this, void 0, void 0, function* () {\n        // TODO: add support for getting recognitions from here if own speech\n        var _a;\n        // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\n        if ((_a = e.result) === null || _a === void 0 ? void 0 : _a.errorDetails) {\n          yield this.cancelSpeech();\n          // TODO: format the error message contained in 'errorDetails'\n          this.fireCancelEvent(e.result.errorDetails);\n        }\n      });\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      this.canceled = () => __awaiter(this, void 0, void 0, function* () {\n        if (this.privSpeechState !== SpeechState.Inactive) {\n          try {\n            yield this.cancelSpeech();\n          } catch (error) {\n            this.privSpeechState = SpeechState.Inactive;\n          }\n        }\n      });\n    }\n  }\n  get state() {\n    return this.privSpeechState;\n  }\n  set state(newState) {\n    this.privSpeechState = newState;\n  }\n  onConnection() {\n    this.privSpeechState = SpeechState.Connected;\n  }\n  onDisconnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privSpeechState = SpeechState.Inactive;\n      yield this.cancelSpeech();\n    });\n  }\n  /**\n   * Fire a cancel event\n   * @param error\n   */\n  fireCancelEvent(error) {\n    try {\n      if (!!this.privTranslator.canceled) {\n        const cancelEvent = new ConversationTranslationCanceledEventArgs(CancellationReason.Error, error, CancellationErrorCode.RuntimeError);\n        this.privTranslator.canceled(this.privTranslator, cancelEvent);\n      }\n    } catch (e) {\n      //\n    }\n  }\n  cancelSpeech() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.stopContinuousRecognitionAsync();\n        yield (_a = this.privReco) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this.privSpeechState = SpeechState.Inactive;\n      } catch (e) {\n        // ignore the error\n      }\n    });\n  }\n}\n/**\n * Join, leave or connect to a conversation.\n */\nexport class ConversationTranslator extends ConversationCommon {\n  constructor(audioConfig) {\n    super(audioConfig);\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privIsDisposed = false;\n    this.privIsSpeaking = false;\n    this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\n    this.privPlaceholderRegion = \"westus\";\n    this.privProperties = new PropertyCollection();\n  }\n  get properties() {\n    return this.privProperties;\n  }\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n  get participants() {\n    var _a;\n    return (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.participants;\n  }\n  get canSpeak() {\n    // is there a Conversation websocket available and has the Recognizer been set up\n    if (!this.privConversation.isConnected || !this.privCTRecognizer) {\n      return false;\n    }\n    // is the user already speaking\n    if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\n      return false;\n    }\n    // is the user muted\n    if (this.privConversation.isMutedByHost) {\n      return false;\n    }\n    return true;\n  }\n  joinConversationAsync(conversation, nickname, param1, param2, param3) {\n    try {\n      if (typeof conversation === \"string\") {\n        Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n        if (!!this.privConversation) {\n          this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n        }\n        let lang = param1;\n        if (lang === undefined || lang === null || lang === \"\") {\n          lang = ConversationConnectionConfig.defaultLanguageCode;\n        }\n        // create a placeholder config\n        this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(this.privPlaceholderKey, this.privPlaceholderRegion);\n        this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\n        this.privSpeechTranslationConfig.addTargetLanguage(lang);\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\n        const endpoint = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\n        if (endpoint) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\n        }\n        const speechEndpointHost = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\n        if (speechEndpointHost) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\n        }\n        // join the conversation\n        this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\n        this.privConversation.conversationTranslator = this;\n        this.privConversation.joinConversationAsync(conversation, nickname, lang, result => {\n          if (!result) {\n            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\n          }\n          this.privSpeechTranslationConfig.authorizationToken = result;\n          // connect to the ws\n          this.privConversation.startConversationAsync(() => {\n            this.handleCallback(param2, param3);\n          }, error => {\n            this.handleError(error, param3);\n          });\n        }, error => {\n          this.handleError(error, param3);\n        });\n      } else if (typeof conversation === \"object\") {\n        Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n        // save the nickname\n        this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\n        // ref the conversation object\n        this.privConversation = conversation;\n        // ref the conversation translator object\n        this.privConversation.conversationTranslator = this;\n        Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n        Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n        this.privSpeechTranslationConfig = conversation.config;\n        this.handleCallback(param1, param2);\n      } else {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")), param2);\n      }\n    } catch (error) {\n      this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n    }\n  }\n  /**\n   * Leave the conversation\n   * @param cb\n   * @param err\n   */\n  leaveConversationAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      // stop the speech websocket\n      yield this.cancelSpeech();\n      // stop the websocket\n      yield this.privConversation.endConversationImplAsync();\n      // https delete request\n      yield this.privConversation.deleteConversationImplAsync();\n      this.dispose();\n    }))(), cb, err);\n  }\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n  sendTextMessageAsync(message, cb, err) {\n    try {\n      Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n      Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n      this.privConversation.sendTextMessageAsync(message, cb, err);\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Start speaking\n   * @param cb\n   * @param err\n   */\n  startTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n        Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n        if (this.privCTRecognizer === undefined) {\n          yield this.connectTranslatorRecognizer();\n        }\n        Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\n        if (!this.canSpeak) {\n          this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n        }\n        yield this.startContinuousRecognition();\n        this.privIsSpeaking = true;\n      } catch (error) {\n        this.privIsSpeaking = false;\n        yield this.cancelSpeech();\n        throw error;\n      }\n    }))(), cb, err);\n  }\n  /**\n   * Stop speaking\n   * @param cb\n   * @param err\n   */\n  stopTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!this.privIsSpeaking) {\n          // stop speech\n          yield this.cancelSpeech();\n          return;\n        }\n        // stop the recognition but leave the websocket open\n        this.privIsSpeaking = false;\n        yield new Promise((resolve, reject) => {\n          this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\n        });\n      } catch (error) {\n        yield this.cancelSpeech();\n      }\n    }))(), cb, err);\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  dispose(reason, success, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      if (this.isDisposed && !this.privIsSpeaking) {\n        return;\n      }\n      yield this.cancelSpeech();\n      this.privIsDisposed = true;\n      this.privSpeechTranslationConfig.close();\n      this.privSpeechRecognitionLanguage = undefined;\n      this.privProperties = undefined;\n      this.privAudioConfig = undefined;\n      this.privSpeechTranslationConfig = undefined;\n      this.privConversation.dispose();\n      this.privConversation = undefined;\n    }))(), success, err);\n  }\n  /**\n   * Cancel the speech websocket\n   */\n  cancelSpeech() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.privIsSpeaking = false;\n        yield (_a = this.privCTRecognizer) === null || _a === void 0 ? void 0 : _a.onDisconnection();\n        this.privCTRecognizer = undefined;\n      } catch (e) {\n        // ignore the error\n      }\n    });\n  }\n  /**\n   * Connect to the speech translation recognizer.\n   * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n   * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n   * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n   */\n  connectTranslatorRecognizer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.privAudioConfig === undefined) {\n          this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\n        }\n        // clear the temp subscription key if it's a participant joining\n        if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) === this.privPlaceholderKey) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\n        }\n        // TODO\n        const token = encodeURIComponent(this.privConversation.room.token);\n        let endpointHost = this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\n        endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\n        const url = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\n        this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\n      } catch (error) {\n        yield this.cancelSpeech();\n        throw error;\n      }\n    });\n  }\n  /**\n   * Handle the start speaking request\n   */\n  startContinuousRecognition() {\n    return new Promise((resolve, reject) => {\n      this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["ConversationConnectionConfig","marshalPromiseToCallbacks","Contracts","AudioConfig","CancellationErrorCode","CancellationReason","ProfanityOption","PropertyCollection","PropertyId","SpeechTranslationConfig","TranslationRecognizer","ConversationImpl","ConversationCommon","ConversationTranslationCanceledEventArgs","SpeechState","ConversationTranslationRecognizer","constructor","speechConfig","audioConfig","translator","privSpeechState","Inactive","privTranslator","sessionStarted","Connected","sessionStopped","recognized","tr","e","__awaiter","result","errorDetails","cancelSpeech","fireCancelEvent","canceled","error","state","newState","onConnection","onDisconnection","cancelEvent","Error","RuntimeError","stopContinuousRecognitionAsync","privReco","disconnect","ConversationTranslator","restErrors","privIsDisposed","privIsSpeaking","privPlaceholderKey","privPlaceholderRegion","privProperties","properties","speechRecognitionLanguage","privSpeechRecognitionLanguage","participants","privConversation","canSpeak","isConnected","privCTRecognizer","Connecting","isMutedByHost","joinConversationAsync","conversation","nickname","param1","param2","param3","throwIfNullOrUndefined","privErrors","invalidArgs","replace","throwIfNullOrWhitespace","handleError","permissionDeniedStart","lang","undefined","defaultLanguageCode","privSpeechTranslationConfig","fromSubscription","setProfanity","Masked","addTargetLanguage","setProperty","SpeechServiceConnection_RecoLanguage","ConversationTranslator_Name","endpoint","getProperty","ConversationTranslator_Host","speechEndpointHost","SpeechServiceConnection_Host","conversationTranslator","permissionDeniedConnect","authorizationToken","startConversationAsync","handleCallback","room","token","config","leaveConversationAsync","cb","err","endConversationImplAsync","deleteConversationImplAsync","dispose","sendTextMessageAsync","message","permissionDeniedSend","startTranscribingAsync","connectTranslatorRecognizer","startContinuousRecognition","stopTranscribingAsync","Promise","resolve","reject","isDisposed","reason","success","close","privAudioConfig","fromDefaultMicrophoneInput","SpeechServiceConnection_Key","encodeURIComponent","endpointHost","speechHost","cognitiveSpeechRegion","url","speechPath","configParams","SpeechServiceConnection_Endpoint","startContinuousRecognitionAsync"],"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, translator?: ConversationTranslator) {\r\n        super(speechConfig, audioConfig);\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // TODO: add support for getting recognitions from here if own speech\r\n\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onDisconnection(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | { config: SpeechTranslationConfig }, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onDisconnection();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}