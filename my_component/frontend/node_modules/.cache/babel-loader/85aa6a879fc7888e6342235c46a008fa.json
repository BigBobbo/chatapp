{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfilePhraseResult, VoiceProfileResult, VoiceProfileType } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\nexport class VoiceProfileClient {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n   */\n  createProfileAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createProfile(profileType, lang);\n      if (!result.ok) {\n        throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\n      }\n      const response = result.json;\n      const profile = new VoiceProfile(response.profileId, profileType);\n      return profile;\n    });\n  }\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n  retrieveEnrollmentResultAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfileStatus(profile);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n   */\n  getAllProfilesAsync(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfiles(profileType);\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n        return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n      }\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n    });\n  }\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n   * @param {string} lang Language string (locale) for Voice Profile\n   */\n  getActivationPhrasesAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getPhrases(profileType, lang);\n      return new VoiceProfilePhraseResult(result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled, result.statusText, result.json);\n    });\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n  enrollProfileAsync(profile, audioConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const configImpl = audioConfig;\n      Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n  deleteProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.deleteProfile(profile);\n      return this.getResult(result, ResultReason.DeletedVoiceProfile);\n    });\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n  resetProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.resetProfile(profile);\n      return this.getResult(result, ResultReason.ResetVoiceProfile);\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    return;\n  }\n  // Does class setup, swiped from Recognizer.\n  implClientSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n  getResult(result, successReason) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n}","map":{"version":3,"mappings":"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","names":["Context","OS","SpeakerIdMessageAdapter","SpeakerRecognitionConfig","Contracts","PropertyId","ResultReason","VoiceProfile","VoiceProfileEnrollmentResult","VoiceProfilePhraseResult","VoiceProfileResult","VoiceProfileType","VoiceProfileClient","constructor","speechConfig","speechConfigImpl","throwIfNull","privProperties","properties","clone","implClientSetup","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","createProfileAsync","profileType","lang","result","privAdapter","createProfile","ok","Error","status","statusText","response","json","profile","profileId","retrieveEnrollmentResultAsync","getProfileStatus","EnrolledVoiceProfile","Canceled","data","getAllProfilesAsync","getProfiles","TextIndependentIdentification","FromIdentificationProfileList","FromVerificationProfileList","getActivationPhrasesAsync","getPhrases","EnrollingVoiceProfile","enrollProfileAsync","audioConfig","configImpl","throwIfNullOrUndefined","createEnrollment","deleteProfileAsync","deleteProfile","getResult","DeletedVoiceProfile","resetProfileAsync","resetProfile","ResetVoiceProfile","close","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","successReason"],"sources":["src/sdk/VoiceProfileClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\nimport { EnrollmentResultJSON } from \"./VoiceProfileEnrollmentResult\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const result: { ok: boolean; status: number; statusText: string; json: { profileId?: string } } = await this.privAdapter.createProfile(profileType, lang);\r\n        if (!result.ok) {\r\n            throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\r\n        }\r\n        const response: { profileId?: string } = result.json;\r\n        const profile = new VoiceProfile(response.profileId, profileType);\r\n        return profile;\r\n    }\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        const result:  { ok: boolean; data: string; statusText: string; json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfileStatus(profile);\r\n        return new VoiceProfileEnrollmentResult(\r\n            result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n            result.data,\r\n            result.statusText\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        const result: { ok: boolean; statusText: string; json: { value: { passPhrase?: string; activationPhrase?: string }[] } } = await this.privAdapter.getPhrases(profileType, lang);\r\n        return new VoiceProfilePhraseResult(\r\n            result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled,\r\n            result.statusText,\r\n            result.json\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n\r\n        const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\r\n        return new VoiceProfileEnrollmentResult(\r\n            result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n            result.data,\r\n            result.statusText\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\r\n        return this.getResult(result, ResultReason.DeletedVoiceProfile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        const result: IRestResponse = await this.privAdapter.resetProfile(profile);\r\n        return this.getResult(result, ResultReason.ResetVoiceProfile);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}