{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\nexport var PromiseState;\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState || (PromiseState = {}));\nexport class PromiseResult {\n  constructor(promiseResultEventSource) {\n    this.throwIfError = () => {\n      if (this.isError) {\n        throw this.error;\n      }\n    };\n    promiseResultEventSource.on(result => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = false;\n        this.privResult = result;\n      }\n    }, error => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = true;\n        this.privError = error;\n      }\n    });\n  }\n  get isCompleted() {\n    return this.privIsCompleted;\n  }\n  get isError() {\n    return this.privIsError;\n  }\n  get error() {\n    return this.privError;\n  }\n  get result() {\n    return this.privResult;\n  }\n}\nexport class PromiseResultEventSource {\n  constructor() {\n    this.setResult = result => {\n      this.privOnSetResult(result);\n    };\n    this.setError = error => {\n      this.privOnSetError(error);\n    };\n    this.on = (onSetResult, onSetError) => {\n      this.privOnSetResult = onSetResult;\n      this.privOnSetError = onSetError;\n    };\n  }\n}\nexport class Deferred {\n  constructor() {\n    this.resolve = result => {\n      this.privResolve(result);\n      return this;\n    };\n    this.reject = error => {\n      this.privReject(error);\n      return this;\n    };\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    this.privPromise = new Promise((resolve, reject) => {\n      this.privResolve = resolve;\n      this.privReject = reject;\n    });\n  }\n  get promise() {\n    return this.privPromise;\n  }\n}\nexport class Sink {\n  constructor() {\n    this.privState = PromiseState.None;\n    this.privPromiseResult = null;\n    this.privPromiseResultEvents = null;\n    this.privSuccessHandlers = [];\n    this.privErrorHandlers = [];\n    this.privPromiseResultEvents = new PromiseResultEventSource();\n    this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n  }\n  get state() {\n    return this.privState;\n  }\n  get result() {\n    return this.privPromiseResult;\n  }\n  resolve(result) {\n    if (this.privState !== PromiseState.None) {\n      throw new Error(\"'Cannot resolve a completed promise'\");\n    }\n    this.privState = PromiseState.Resolved;\n    this.privPromiseResultEvents.setResult(result);\n    for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n      this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n    }\n    this.detachHandlers();\n  }\n  reject(error) {\n    if (this.privState !== PromiseState.None) {\n      throw new Error(\"'Cannot reject a completed promise'\");\n    }\n    this.privState = PromiseState.Rejected;\n    this.privPromiseResultEvents.setError(error);\n    for (const errorHandler of this.privErrorHandlers) {\n      this.executeErrorCallback(error, errorHandler);\n    }\n    this.detachHandlers();\n  }\n  on(successCallback, errorCallback) {\n    if (successCallback == null) {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      successCallback = () => {};\n    }\n    if (this.privState === PromiseState.None) {\n      this.privSuccessHandlers.push(successCallback);\n      this.privErrorHandlers.push(errorCallback);\n    } else {\n      if (this.privState === PromiseState.Resolved) {\n        this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n      } else if (this.privState === PromiseState.Rejected) {\n        this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n      }\n      this.detachHandlers();\n    }\n  }\n  executeSuccessCallback(result, successCallback, errorCallback) {\n    try {\n      successCallback(result);\n    } catch (e) {\n      this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n    }\n  }\n  executeErrorCallback(error, errorCallback) {\n    if (errorCallback) {\n      try {\n        errorCallback(error);\n      } catch (e) {\n        throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n      }\n    } else {\n      throw new Error(`'Unhandled error: ${error}'`);\n    }\n  }\n  detachHandlers() {\n    this.privErrorHandlers = [];\n    this.privSuccessHandlers = [];\n  }\n}\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nexport function marshalPromiseToCallbacks(promise, cb, err) {\n  promise.then(val => {\n    try {\n      if (!!cb) {\n        cb(val);\n      }\n    } catch (error) {\n      if (!!err) {\n        try {\n          if (error instanceof Error) {\n            const typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n          // eslint-disable-next-line no-empty\n        } catch (error) {}\n      }\n    }\n  }, error => {\n    if (!!err) {\n      try {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n        // eslint-disable-next-line no-empty\n      } catch (error) {}\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["PromiseState","PromiseResult","constructor","promiseResultEventSource","isError","error","on","result","privIsCompleted","privIsError","privResult","privError","isCompleted","PromiseResultEventSource","privOnSetResult","privOnSetError","onSetResult","onSetError","Deferred","privResolve","privReject","privPromise","Promise","resolve","reject","promise","Sink","None","privPromiseResultEvents","privPromiseResult","state","privState","Error","Resolved","setResult","i","privSuccessHandlers","length","executeSuccessCallback","privErrorHandlers","detachHandlers","Rejected","setError","errorHandler","executeErrorCallback","successCallback","errorCallback","push","e","marshalPromiseToCallbacks","cb","err","then","val","typedError","name","message"],"sources":["src/common/Promise.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}