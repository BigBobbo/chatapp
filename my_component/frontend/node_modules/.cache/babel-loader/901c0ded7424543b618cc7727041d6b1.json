{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { MessageType } from \"../common/Exports\";\nimport { CancellationErrorCode, ConversationTranscriptionCanceledEventArgs, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n// eslint-disable-next-line max-classes-per-file\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\n    this.privTranscriberRecognizer = transcriber;\n    this.sendPrePayloadJSONOverride = connection => this.sendTranscriptionStartJSON(connection);\n    if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\n      this.privSpeechContext.setWordLevelTimings();\n    }\n  }\n  sendSpeechEventAsync(info, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        const connection = yield this.fetchConnection();\n        yield this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\n      }\n    });\n  }\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      const resultProps = new PropertyCollection();\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      let processed = false;\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n        case \"speech.fragment\":\n          const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n          result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, hypothesis.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(offset);\n          const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n          if (!!this.privTranscriberRecognizer.recognizing) {\n            try {\n              this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n              /* eslint-disable no-empty */\n            } catch (error) {\n              // Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n          processed = true;\n          break;\n        case \"speech.phrase\":\n          const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n          if (ResultReason.Canceled === resultReason) {\n            const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            const cancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\n            yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, simple.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n              } else {\n                const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\n                const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.Text, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, detailed.SpeakerId, undefined, offsetCorrectedJson, resultProps);\n              }\n              const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n              if (!!this.privTranscriberRecognizer.recognized) {\n                try {\n                  this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\n                  /* eslint-disable no-empty */\n                } catch (error) {\n                  // Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              }\n              // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n          processed = true;\n          break;\n        default:\n          break;\n      }\n      return processed;\n    });\n  }\n  // Cancels recognition.\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n    if (!!this.privTranscriberRecognizer.canceled) {\n      const cancelEvent = new ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n      try {\n        this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n        /* eslint-disable no-empty */\n      } catch (_a) {}\n    }\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined,\n      // Text\n      undefined,\n      // Duration\n      undefined,\n      // Offset\n      undefined,\n      // Language\n      undefined,\n      // Language Detection Confidence\n      undefined,\n      // Speaker Id\n      error, undefined,\n      // Json\n      properties);\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* eslint-disable no-empty */\n      } catch (_b) {}\n    }\n  }\n  // Encapsulated for derived service recognizers that need to send additional JSON\n  sendTranscriptionStartJSON(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendSpeechContext(connection, true);\n      const info = this.privTranscriberRecognizer.getConversationInfo();\n      const payload = this.createSpeechEventPayload(info, \"start\");\n      yield this.sendSpeechEvent(connection, payload);\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n  sendSpeechEvent(connection, payload) {\n    const speechEventJson = JSON.stringify(payload);\n    if (speechEventJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.event\", this.privRequestSession.requestId, \"application/json\", speechEventJson));\n    }\n    return;\n  }\n  createSpeechEventPayload(info, command) {\n    const eventDict = {\n      id: \"meeting\",\n      name: command,\n      meeting: info.conversationProperties\n    };\n    eventDict.meeting.id = info.id;\n    eventDict.meeting.attendees = info.participants;\n    eventDict.meeting.record = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\n    return eventDict;\n  }\n}","map":{"version":3,"mappings":"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","names":["MessageType","CancellationErrorCode","ConversationTranscriptionCanceledEventArgs","OutputFormat","PropertyCollection","PropertyId","ResultReason","SpeechRecognitionEventArgs","SpeechRecognitionResult","CancellationErrorCodePropertyName","DetailedSpeechPhrase","EnumTranslation","OutputFormatPropertyName","RecognitionStatus","ServiceRecognizerBase","SimpleSpeechPhrase","SpeechHypothesis","SpeechConnectionMessage","TranscriptionServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","transcriber","privTranscriberRecognizer","sendPrePayloadJSONOverride","connection","sendTranscriptionStartJSON","privRecognizerConfig","parameters","getProperty","SpeechServiceResponse_RequestWordLevelTimestamps","privSpeechContext","setWordLevelTimings","sendSpeechEventAsync","info","command","privRequestSession","isRecognizing","fetchConnection","sendSpeechEvent","createSpeechEventPayload","processTypeSpecificMessages","connectionMessage","result","resultProps","setProperty","SpeechServiceResponse_JsonResult","textBody","processed","path","toLowerCase","hypothesis","fromJSON","offset","Offset","currentTurnAudioOffset","requestId","RecognizingSpeech","Text","Duration","Language","LanguageDetectionConfidence","SpeakerId","undefined","onHypothesis","ev","sessionId","recognizing","error","simple","resultReason","implTranslateRecognitionResult","onPhraseRecognized","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","Simple","DisplayText","detailed","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","event","recognized","privSuccessCallback","e","privErrorCallback","cancelRecognition","cancellationReason","errorCode","properties","canceled","cancelEvent","sendSpeechContext","getConversationInfo","payload","sendWaveHeader","speechEventJson","JSON","stringify","send","eventDict","id","name","meeting","conversationProperties","attendees","participants","record","audiorecording"],"sources":["src/common.speech/TranscriptionServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privTranscriberRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.Text,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                detailed.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranscriberRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranscriberRecognizer.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n        await this.sendSpeechEvent(connection, payload);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        eventDict.meeting.record = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\r\n        return eventDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}