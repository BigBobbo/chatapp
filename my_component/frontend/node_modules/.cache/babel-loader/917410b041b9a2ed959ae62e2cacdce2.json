{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { RecognitionMode, RecognizerConfig, TranslationConnectionFactory, TranslationServiceRecognizer } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Connection } from \"./Connection\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\nexport class TranslationRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the TranslationRecognizer.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\n    this.privDisposedTranslationRecognizer = false;\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * Gets the language name that was set when the recognizer was created.\n   * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} Gets the language name that was set when the recognizer was created.\n   */\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets target languages for translation that were set when the recognizer was created.\n   * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n   * @member TranslationRecognizer.prototype.targetLanguages\n   * @function\n   * @public\n   * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n   */\n  get targetLanguages() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n  }\n  /**\n   * Gets the name of output voice.\n   * @member TranslationRecognizer.prototype.voiceName\n   * @function\n   * @public\n   * @returns {string} the name of output voice.\n   */\n  get voiceName() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n  }\n  /**\n   * The collection of properties and their values defined for this TranslationRecognizer.\n   * @member TranslationRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member TranslationRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member TranslationRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - Authorization token.\n   */\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * Starts recognition and translation, and stops after the first utterance is recognized.\n   * The task returns the translation text as result.\n   * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\n   * for single shot recognition like command or query. For long-running recognition,\n   * use startContinuousRecognitionAsync() instead.\n   * @member TranslationRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the translation has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive translation results.\n   * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous recognition and translation.\n   * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * dynamically remove a language from list of target language\n   * (can be used while recognition is ongoing)\n   * @member TranslationRecognizer.prototype.removeTargetLanguage\n   * @function\n   * @param lang - language to be removed\n   * @public\n   */\n  removeTargetLanguage(lang) {\n    Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      const languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      const index = languages.indexOf(lang);\n      if (index > -1) {\n        languages.splice(index, 1);\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n        this.updateLanguages(languages);\n      }\n    }\n  }\n  /**\n   * dynamically add a language to list of target language\n   * (can be used while recognition is ongoing)\n   * @member TranslationRecognizer.prototype.addTargetLanguage\n   * @function\n   * @param lang - language to be added\n   * @public\n   */\n  addTargetLanguage(lang) {\n    Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\n    let languages = [];\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      if (!languages.includes(lang)) {\n        languages.push(lang);\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n      }\n    } else {\n      this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\n      languages = [lang];\n    }\n    this.updateLanguages(languages);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member TranslationRecognizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * handles ConnectionEstablishedEvent for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onConnection\n   * @function\n   * @public\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onConnection() {}\n  /**\n   * handles disconnection events for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onDisconnection\n   * @function\n   * @public\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onDisconnection() {\n    return __awaiter(this, void 0, void 0, function* () {});\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedTranslationRecognizer) {\n        return;\n      }\n      this.privDisposedTranslationRecognizer = true;\n      if (disposing) {\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n  updateLanguages(languages) {\n    const conn = Connection.fromRecognizer(this);\n    if (!!conn) {\n      conn.setMessageProperty(\"speech.context\", \"translationcontext\", {\n        to: languages\n      });\n      conn.sendMessageAsync(\"event\", JSON.stringify({\n        id: \"translation\",\n        name: \"updateLanguage\",\n        to: languages\n      }));\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["RecognitionMode","RecognizerConfig","TranslationConnectionFactory","TranslationServiceRecognizer","marshalPromiseToCallbacks","Connection","Contracts","PropertyId","Recognizer","TranslationRecognizer","constructor","speechConfig","audioConfig","configImpl","throwIfNull","properties","privDisposedTranslationRecognizer","getProperty","SpeechServiceConnection_TranslationVoice","undefined","throwIfNullOrWhitespace","SpeechServiceConnection_TranslationToLanguages","SpeechServiceConnection_RecoLanguage","speechRecognitionLanguage","throwIfDisposed","targetLanguages","split","voiceName","privProperties","authorizationToken","SpeechServiceAuthorization_Token","value","setProperty","recognizeOnceAsync","cb","err","recognizeOnceAsyncImpl","Conversation","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","removeTargetLanguage","lang","throwIfNullOrUndefined","languages","index","indexOf","splice","join","updateLanguages","addTargetLanguage","includes","push","close","errorCb","dispose","onConnection","onDisconnection","disposing","implRecognizerStop","_super","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","conn","fromRecognizer","setMessageProperty","to","sendMessageAsync","JSON","stringify","id","name"],"sources":["src/sdk/TranslationRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}