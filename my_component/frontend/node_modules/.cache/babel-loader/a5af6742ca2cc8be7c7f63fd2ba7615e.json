{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { VoiceProfileType } from \"./Exports\";\n/**\n * Defines SpeakerIdentificationModel class for Speaker Recognition\n * Model contains a set of profiles against which to identify speaker(s)\n * @class SpeakerIdentificationModel\n */\nexport class SpeakerIdentificationModel {\n  constructor(profiles) {\n    this.privVoiceProfiles = [];\n    Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\n    if (profiles.length === 0) {\n      throw new Error(\"Empty Voice Profiles array\");\n    }\n    profiles.forEach(profile => {\n      if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\n        throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\n      }\n      this.privVoiceProfiles.push(profile);\n    });\n  }\n  static fromProfiles(profiles) {\n    return new SpeakerIdentificationModel(profiles);\n  }\n  get voiceProfileIds() {\n    return this.privVoiceProfiles.map(profile => profile.profileId).join(\",\");\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAEIC,gBAAgB,QACb,WAAW;AAElB;;;;;AAKA,OAAM,MAAOC,0BAA0B;EAGnCC,YAAoBC,QAAwB;IAFpC,sBAAiB,GAAmB,EAAE;IAG1CJ,SAAS,CAACK,sBAAsB,CAACD,QAAQ,EAAE,eAAe,CAAC;IAC3D,IAAIA,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;;IAEjDH,QAAQ,CAACI,OAAO,CAAEC,OAAqB,IAAU;MAC7C,IAAIA,OAAO,CAACC,WAAW,KAAKT,gBAAgB,CAACU,6BAA6B,EAAE;QACxE,MAAM,IAAIJ,KAAK,CAAC,wEAAwE,GAAGE,OAAO,CAACG,SAAS,CAAC;;MAEjH,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAACL,OAAO,CAAC;IACxC,CAAC,CAAC;EACN;EACO,OAAOM,YAAY,CAACX,QAAwB;IAC/C,OAAO,IAAIF,0BAA0B,CAACE,QAAQ,CAAC;EACnD;EAEA,IAAWY,eAAe;IACtB,OAAO,IAAI,CAACH,iBAAiB,CAACI,GAAG,CAAER,OAAqB,IAAaA,OAAO,CAACG,SAAS,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EACrG","names":["Contracts","VoiceProfileType","SpeakerIdentificationModel","constructor","profiles","throwIfNullOrUndefined","length","Error","forEach","profile","profileType","TextIndependentIdentification","profileId","privVoiceProfiles","push","fromProfiles","voiceProfileIds","map","join"],"sources":["src/sdk/SpeakerIdentificationModel.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        profiles.forEach((profile: VoiceProfile): void => {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n        });\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privVoiceProfiles.map((profile: VoiceProfile): string => profile.profileId).join(\",\");\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}