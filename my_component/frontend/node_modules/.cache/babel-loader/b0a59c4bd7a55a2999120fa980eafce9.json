{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyCollection, PropertyId } from \"./Exports\";\nimport { LanguageIdMode } from \"./LanguageIdMode\";\nimport { LanguageIdPriority } from \"./LanguageIdPriority\";\n/**\n * Language auto detect configuration.\n * @class AutoDetectSourceLanguageConfig\n * Added in version 1.13.0.\n */\nexport class AutoDetectSourceLanguageConfig {\n  constructor() {\n    this.privProperties = new PropertyCollection();\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\n    this.privLanguageIdMode = LanguageIdMode.AtStart;\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromOpenRange\n   * @function\n   * @public\n   * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\n   * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\n   */\n  static fromOpenRange() {\n    const config = new AutoDetectSourceLanguageConfig();\n    config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\n    return config;\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromLanguages\n   * @function\n   * @public\n   * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\n   */\n  static fromLanguages(languages) {\n    Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n    const config = new AutoDetectSourceLanguageConfig();\n    config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n    return config;\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\n   * @function\n   * @public\n   * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\n   */\n  static fromSourceLanguageConfigs(configs) {\n    if (configs.length < 1) {\n      throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n    }\n    const autoConfig = new AutoDetectSourceLanguageConfig();\n    const langs = [];\n    configs.forEach(config => {\n      langs.push(config.language);\n      if (config.endpointId !== undefined && config.endpointId !== \"\") {\n        const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n        autoConfig.properties.setProperty(customProperty, config.endpointId);\n      }\n    });\n    autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n    return autoConfig;\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.prototype.properties\n   * @function\n   * @public\n   * @return {PropertyCollection} Properties of the config.\n   * @summary Gets an auto detected language config properties\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.prototype.mode\n   * @function\n   * @public\n   * @param {LanguageIdMode} mode LID mode desired.\n   * @summary Sets LID operation to desired mode\n   */\n  set mode(mode) {\n    if (mode === LanguageIdMode.Continuous) {\n      this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\n      this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\n    } else {\n      this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\n      this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, undefined);\n    }\n    this.privLanguageIdMode = mode;\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.prototype.priority\n   * @function\n   * @public\n   * @param {LanguageIdPriority} priority LID priority desired.\n   * @summary Sets LID operation to desired priority\n   */\n  set priority(priority) {\n    if (priority === LanguageIdPriority.Accuracy) {\n      if (this.privLanguageIdMode !== LanguageIdMode.Continuous) {\n        // Accuracy not allowed for continuous mode\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Accuracy\");\n      }\n    } else {\n      this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\n      this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["AutoDetectSourceLanguagesOpenRangeOptionName","Contracts","PropertyCollection","PropertyId","LanguageIdMode","LanguageIdPriority","AutoDetectSourceLanguageConfig","constructor","privProperties","setProperty","SpeechServiceConnection_AtStartLanguageIdPriority","privLanguageIdMode","AtStart","fromOpenRange","config","properties","SpeechServiceConnection_AutoDetectSourceLanguages","fromLanguages","languages","throwIfArrayEmptyOrWhitespace","join","fromSourceLanguageConfigs","configs","length","Error","autoConfig","langs","forEach","push","language","endpointId","undefined","customProperty","SpeechServiceConnection_EndpointId","toString","mode","Continuous","SpeechServiceConnection_RecognitionEndpointVersion","SpeechServiceConnection_ContinuousLanguageIdPriority","priority","Accuracy"],"sources":["src/sdk/AutoDetectSourceLanguageConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode\";\r\nimport { LanguageIdPriority } from \"./LanguageIdPriority\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\r\n        } else {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, undefined);\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.priority\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdPriority} priority LID priority desired.\r\n     * @summary Sets LID operation to desired priority\r\n     */\r\n    public set priority(priority: LanguageIdPriority) {\r\n        if (priority === LanguageIdPriority.Accuracy) {\r\n            if (this.privLanguageIdMode !== LanguageIdMode.Continuous) {\r\n                // Accuracy not allowed for continuous mode\r\n                this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Accuracy\");\r\n            }\r\n        } else {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}