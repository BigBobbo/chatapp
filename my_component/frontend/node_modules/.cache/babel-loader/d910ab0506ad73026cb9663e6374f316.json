{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechSynthesisConnectionFactory {\n  constructor() {\n    this.synthesisUri = \"/cognitiveservices/websocket/v1\";\n  }\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const hostPrefix = endpointId === undefined ? \"tts\" : \"voice\";\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n    const queryParams = {};\n    if (!endpoint) {\n      endpoint = host + this.synthesisUri;\n    }\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    if (endpointId !== undefined) {\n      headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n    }\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SACIA,SAAS,EACTC,mBAAmB,QAChB,2BAA2B;AAKlC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAGIC,yBAAyB,QACtB,WAAW;AAClB,SAASC,WAAW,QAAQ,eAAe;AAE3C,SACIC,mBAAmB,QAChB,uBAAuB;AAE9B,OAAM,MAAOC,gCAAgC;EAA7CC;IAEqB,iBAAY,GAAW,iCAAiC;EAkC7E;EAhCWC,MAAM,CACTC,MAAyB,EACzBC,QAAkB,EAClBC,YAAqB;IAErB,IAAIC,QAAQ,GAAWH,MAAM,CAACI,UAAU,CAACC,WAAW,CAACb,UAAU,CAACc,gCAAgC,EAAEC,SAAS,CAAC;IAC5G,MAAMC,MAAM,GAAWR,MAAM,CAACI,UAAU,CAACC,WAAW,CAACb,UAAU,CAACiB,8BAA8B,EAAEF,SAAS,CAAC;IAC1G,MAAMG,UAAU,GAAWjB,qBAAqB,CAACkB,aAAa,CAACH,MAAM,CAAC;IACtE,MAAMI,UAAU,GAAGZ,MAAM,CAACI,UAAU,CAACC,WAAW,CAACb,UAAU,CAACqB,kCAAkC,EAAEN,SAAS,CAAC;IAC1G,MAAMO,UAAU,GAAIF,UAAU,KAAKL,SAAS,GAAI,KAAK,GAAG,OAAO;IAC/D,MAAMQ,IAAI,GAAWf,MAAM,CAACI,UAAU,CAACC,WAAW,CAACb,UAAU,CAACwB,4BAA4B,EAAE,QAAQ,GAAGR,MAAM,GAAG,GAAG,GAAGM,UAAU,GAAG,SAAS,GAAGJ,UAAU,CAAC;IAE1J,MAAMO,WAAW,GAA8B,EAAE;IAEjD,IAAI,CAACd,QAAQ,EAAE;MACXA,QAAQ,GAAGY,IAAI,GAAG,IAAI,CAACG,YAAY;;IAGvC,MAAMC,OAAO,GAA8B,EAAE;IAC7C,IAAIlB,QAAQ,CAACmB,KAAK,KAAKb,SAAS,IAAIN,QAAQ,CAACmB,KAAK,KAAK,EAAE,EAAE;MACvDD,OAAO,CAAClB,QAAQ,CAACoB,UAAU,CAAC,GAAGpB,QAAQ,CAACmB,KAAK;;IAEjDD,OAAO,CAACxB,WAAW,CAAC2B,YAAY,CAAC,GAAGpB,YAAY;IAChD,IAAIU,UAAU,KAAKL,SAAS,EAAE;MAC1BY,OAAO,CAACvB,mBAAmB,CAAC2B,uBAAuB,CAAC,GAAGX,UAAU;;IAGrEZ,MAAM,CAACI,UAAU,CAACoB,WAAW,CAAChC,UAAU,CAACiC,2BAA2B,EAAEtB,QAAQ,CAAC;IAE/E,MAAMuB,iBAAiB,GAAY1B,MAAM,CAACI,UAAU,CAACC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM;IACzH,OAAO,IAAId,mBAAmB,CAACY,QAAQ,EAAEc,WAAW,EAAEE,OAAO,EAAE,IAAIzB,yBAAyB,EAAE,EAAEJ,SAAS,CAACqC,cAAc,CAAC3B,MAAM,CAACI,UAAU,CAAC,EAAEsB,iBAAiB,EAAExB,YAAY,CAAC;EACjL","names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","SpeechSynthesisConnectionFactory","constructor","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","endpointId","SpeechServiceConnection_EndpointId","hostPrefix","host","SpeechServiceConnection_Host","queryParams","synthesisUri","headers","token","headerName","ConnectionId","CustomVoiceDeploymentId","setProperty","SpeechServiceConnection_Url","enableCompression","fromParameters"],"sources":["src/common.speech/SpeechSynthesisConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}