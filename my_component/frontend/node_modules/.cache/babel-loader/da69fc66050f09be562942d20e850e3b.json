{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { OutputFormatPropertyName, WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.multiaudioRelativeUri = \"/speech/recognition/multiaudio\";\n  }\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const hostDefault = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\n    const queryParams = {};\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n    if (endpointId) {\n      if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n        queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n      }\n    } else if (language) {\n      if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n        queryParams[QueryParameterNames.Language] = language;\n      }\n    }\n    const wordLevelTimings = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\n    const detailed = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\n    if (wordLevelTimings || detailed) {\n      queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\n    }\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    if (!endpoint) {\n      endpoint = host;\n    }\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n}","map":{"version":3,"mappings":"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","names":["ProxyInfo","WebsocketConnection","OutputFormat","PropertyId","ConnectionFactoryBase","OutputFormatPropertyName","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranscriberConnectionFactory","constructor","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","hostDefault","multiaudioRelativeUri","host","SpeechServiceConnection_Host","queryParams","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","search","CustomSpeechDeploymentId","Language","wordLevelTimings","SpeechServiceResponse_RequestWordLevelTimestamps","toLowerCase","detailed","Simple","Format","Detailed","setCommonUrlParams","headers","token","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig"],"sources":["src/common.speech/TranscriberConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}