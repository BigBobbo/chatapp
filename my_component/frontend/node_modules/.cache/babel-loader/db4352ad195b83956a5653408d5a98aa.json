{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { createNoDashGuid, Deferred, Events } from \"../common/Exports\";\nimport { ConnectingToServiceEvent, ListeningStartedEvent, RecognitionStartedEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\nexport class RequestSession {\n  constructor(audioSourceId) {\n    this.privIsDisposed = false;\n    this.privDetachables = new Array();\n    this.privIsAudioNodeDetached = false;\n    this.privIsRecognizing = false;\n    this.privIsSpeechEnded = false;\n    this.privTurnStartAudioOffset = 0;\n    this.privLastRecoOffset = 0;\n    this.privHypothesisReceived = false;\n    this.privBytesSent = 0;\n    this.privRecogNumber = 0;\n    this.privInTurn = false;\n    this.privConnectionAttempts = 0;\n    this.privAudioSourceId = audioSourceId;\n    this.privRequestId = createNoDashGuid();\n    this.privAudioNodeId = createNoDashGuid();\n    this.privTurnDeferral = new Deferred();\n    // We're not in a turn, so resolve.\n    this.privTurnDeferral.resolve();\n  }\n  get sessionId() {\n    return this.privSessionId;\n  }\n  get requestId() {\n    return this.privRequestId;\n  }\n  get audioNodeId() {\n    return this.privAudioNodeId;\n  }\n  get turnCompletionPromise() {\n    return this.privTurnDeferral.promise;\n  }\n  get isSpeechEnded() {\n    return this.privIsSpeechEnded;\n  }\n  get isRecognizing() {\n    return this.privIsRecognizing;\n  }\n  get currentTurnAudioOffset() {\n    return this.privTurnStartAudioOffset;\n  }\n  get recogNumber() {\n    return this.privRecogNumber;\n  }\n  get numConnectionAttempts() {\n    return this.privConnectionAttempts;\n  }\n  // The number of bytes sent for the current connection.\n  // Counter is reset to 0 each time a connection is established.\n  get bytesSent() {\n    return this.privBytesSent;\n  }\n  listenForServiceTelemetry(eventSource) {\n    if (!!this.privServiceTelemetryListener) {\n      this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\n    }\n  }\n  startNewRecognition() {\n    this.privIsSpeechEnded = false;\n    this.privIsRecognizing = true;\n    this.privTurnStartAudioOffset = 0;\n    this.privLastRecoOffset = 0;\n    this.privRecogNumber++;\n    this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\n    this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n  }\n  onAudioSourceAttachCompleted(audioNode, isError) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privAudioNode = audioNode;\n      this.privIsAudioNodeDetached = false;\n      if (isError) {\n        yield this.onComplete();\n      } else {\n        this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n      }\n    });\n  }\n  onPreConnectionStart(authFetchEventId, connectionId) {\n    this.privAuthFetchEventId = authFetchEventId;\n    this.privSessionId = connectionId;\n    this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\n  }\n  onAuthCompleted(isError) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isError) {\n        yield this.onComplete();\n      }\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onConnectionEstablishCompleted(statusCode, reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (statusCode === 200) {\n        this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\n        if (!!this.privAudioNode) {\n          this.privAudioNode.replay();\n        }\n        this.privTurnStartAudioOffset = this.privLastRecoOffset;\n        this.privBytesSent = 0;\n        return;\n      } else if (statusCode === 403) {\n        yield this.onComplete();\n      }\n    });\n  }\n  onServiceTurnEndResponse(continuousRecognition) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privTurnDeferral.resolve();\n      if (!continuousRecognition || this.isSpeechEnded) {\n        yield this.onComplete();\n        this.privInTurn = false;\n      } else {\n        // Start a new request set.\n        this.privTurnStartAudioOffset = this.privLastRecoOffset;\n        this.privAudioNode.replay();\n      }\n    });\n  }\n  onSpeechContext() {\n    this.privRequestId = createNoDashGuid();\n  }\n  onServiceTurnStartResponse() {\n    if (!!this.privTurnDeferral && !!this.privInTurn) {\n      // What? How are we starting a turn with another not done?\n      this.privTurnDeferral.reject(\"Another turn started before current completed.\");\n      // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      this.privTurnDeferral.promise.then().catch(() => {});\n    }\n    this.privInTurn = true;\n    this.privTurnDeferral = new Deferred();\n  }\n  onHypothesis(offset) {\n    if (!this.privHypothesisReceived) {\n      this.privHypothesisReceived = true;\n      this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\n    }\n  }\n  onPhraseRecognized(offset) {\n    this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\n    this.onServiceRecognized(offset);\n  }\n  onServiceRecognized(offset) {\n    this.privLastRecoOffset = offset;\n    this.privHypothesisReceived = false;\n    this.privAudioNode.shrinkBuffers(offset);\n    this.privConnectionAttempts = 0;\n  }\n  onAudioSent(bytesSent) {\n    this.privBytesSent += bytesSent;\n  }\n  onRetryConnection() {\n    this.privConnectionAttempts++;\n  }\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privIsDisposed) {\n        // we should have completed by now. If we did not its an unknown error.\n        this.privIsDisposed = true;\n        for (const detachable of this.privDetachables) {\n          yield detachable.detach();\n        }\n        if (!!this.privServiceTelemetryListener) {\n          this.privServiceTelemetryListener.dispose();\n        }\n        this.privIsRecognizing = false;\n      }\n    });\n  }\n  getTelemetry() {\n    if (this.privServiceTelemetryListener.hasTelemetry) {\n      return this.privServiceTelemetryListener.getTelemetry();\n    } else {\n      return null;\n    }\n  }\n  onStopRecognizing() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.onComplete();\n    });\n  }\n  // Should be called with the audioNode for this session has indicated that it is out of speech.\n  onSpeechEnded() {\n    this.privIsSpeechEnded = true;\n  }\n  onEvent(event) {\n    if (!!this.privServiceTelemetryListener) {\n      this.privServiceTelemetryListener.onEvent(event);\n    }\n    Events.instance.onEvent(event);\n  }\n  onComplete() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privIsRecognizing) {\n        this.privIsRecognizing = false;\n        yield this.detachAudioNode();\n      }\n    });\n  }\n  detachAudioNode() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privIsAudioNodeDetached) {\n        this.privIsAudioNodeDetached = true;\n        if (this.privAudioNode) {\n          yield this.privAudioNode.detach();\n        }\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["createNoDashGuid","Deferred","Events","ConnectingToServiceEvent","ListeningStartedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","ServiceTelemetryListener","RequestSession","constructor","audioSourceId","Array","privAudioSourceId","privRequestId","privAudioNodeId","privTurnDeferral","resolve","sessionId","privSessionId","requestId","audioNodeId","turnCompletionPromise","promise","isSpeechEnded","privIsSpeechEnded","isRecognizing","privIsRecognizing","currentTurnAudioOffset","privTurnStartAudioOffset","recogNumber","privRecogNumber","numConnectionAttempts","privConnectionAttempts","bytesSent","privBytesSent","listenForServiceTelemetry","eventSource","privServiceTelemetryListener","privDetachables","push","attachListener","startNewRecognition","privLastRecoOffset","onEvent","onAudioSourceAttachCompleted","audioNode","isError","privAudioNode","privIsAudioNodeDetached","onComplete","onPreConnectionStart","authFetchEventId","connectionId","privAuthFetchEventId","onAuthCompleted","onConnectionEstablishCompleted","statusCode","reason","replay","onServiceTurnEndResponse","continuousRecognition","privInTurn","onSpeechContext","onServiceTurnStartResponse","reject","then","catch","onHypothesis","offset","privHypothesisReceived","hypothesisReceived","findTimeAtOffset","onPhraseRecognized","phraseReceived","onServiceRecognized","shrinkBuffers","onAudioSent","onRetryConnection","dispose","privIsDisposed","detachable","detach","getTelemetry","hasTelemetry","onStopRecognizing","onSpeechEnded","event","instance","detachAudioNode"],"sources":["src/common.speech/RequestSession.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}