{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n      endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n    }\n    const queryParams = {\n      from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n      to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages)\n    };\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames.StableTranslation, config, queryParams, endpoint);\n    const voiceName = \"voice\";\n    const featureName = \"features\";\n    if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\n      queryParams[featureName] = \"texttospeech\";\n    }\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SACIA,SAAS,EACTC,mBAAmB,QAChB,2BAA2B;AAKlC,SACIC,UAAU,QACP,gBAAgB;AACvB,SACIC,qBAAqB,QAClB,yBAAyB;AAChC,SAGIC,yBAAyB,QACtB,WAAW;AAClB,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,OAAM,MAAOC,4BAA6B,SAAQJ,qBAAqB;EAE5DK,MAAM,CACTC,MAAwB,EACxBC,QAAkB,EAClBC,YAAqB;IAErB,IAAIC,QAAQ,GAAWH,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACa,gCAAgC,EAAEC,SAAS,CAAC;IAC5G,IAAI,CAACJ,QAAQ,EAAE;MACX,MAAMK,MAAM,GAAWR,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACgB,8BAA8B,EAAEF,SAAS,CAAC;MAC1G,MAAMG,UAAU,GAAWhB,qBAAqB,CAACiB,aAAa,CAACH,MAAM,CAAC;MACtE,MAAMI,IAAI,GAAWZ,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACoB,4BAA4B,EAAE,QAAQ,GAAGL,MAAM,GAAG,aAAa,GAAGE,UAAU,CAAC;MAC3IP,QAAQ,GAAGS,IAAI,GAAG,0CAA0C;;IAGhE,MAAME,WAAW,GAA8B;MAC3CC,IAAI,EAAEf,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACuB,oCAAoC,CAAC;MACpFC,EAAE,EAAEjB,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACyB,8CAA8C;KAC9F;IAED,IAAI,CAACC,kBAAkB,CAACnB,MAAM,EAAEc,WAAW,EAAEX,QAAQ,CAAC;IACtD,IAAI,CAACiB,eAAe,CAChB3B,UAAU,CAAC4B,2DAA2D,EACtExB,mBAAmB,CAACyB,iBAAiB,EACrCtB,MAAM,EACNc,WAAW,EACXX,QAAQ,CACX;IAED,MAAMoB,SAAS,GAAW,OAAO;IACjC,MAAMC,WAAW,GAAW,UAAU;IAEtC,IAAIxB,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACgC,wCAAwC,EAAElB,SAAS,CAAC,KAAKA,SAAS,EAAE;MAC7GO,WAAW,CAACS,SAAS,CAAC,GAAGvB,MAAM,CAACI,UAAU,CAACC,WAAW,CAACZ,UAAU,CAACgC,wCAAwC,CAAC;MAC3GX,WAAW,CAACU,WAAW,CAAC,GAAG,cAAc;;IAG7C,MAAME,OAAO,GAA8B,EAAE;IAC7C,IAAIzB,QAAQ,CAAC0B,KAAK,KAAKpB,SAAS,IAAIN,QAAQ,CAAC0B,KAAK,KAAK,EAAE,EAAE;MACvDD,OAAO,CAACzB,QAAQ,CAAC2B,UAAU,CAAC,GAAG3B,QAAQ,CAAC0B,KAAK;;IAEjDD,OAAO,CAAC9B,WAAW,CAACiC,YAAY,CAAC,GAAG3B,YAAY;IAEhDF,MAAM,CAACI,UAAU,CAAC0B,WAAW,CAACrC,UAAU,CAACsC,2BAA2B,EAAE5B,QAAQ,CAAC;IAE/E,MAAM6B,iBAAiB,GAAYhC,MAAM,CAACI,UAAU,CAACC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM;IACzH,OAAO,IAAIb,mBAAmB,CAACW,QAAQ,EAAEW,WAAW,EAAEY,OAAO,EAAE,IAAI/B,yBAAyB,EAAE,EAAEJ,SAAS,CAAC0C,oBAAoB,CAACjC,MAAM,CAAC,EAAEgC,iBAAiB,EAAE9B,YAAY,CAAC;EAC5K","names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranslationConnectionFactory","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","queryParams","from","SpeechServiceConnection_RecoLanguage","to","SpeechServiceConnection_TranslationToLanguages","setCommonUrlParams","setUrlParameter","SpeechServiceResponse_TranslationRequestStablePartialResult","StableTranslation","voiceName","featureName","SpeechServiceConnection_TranslationVoice","headers","token","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig"],"sources":["src/common.speech/TranslationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpoint\r\n        );\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}